---
title: "Trend Analysis: South Bay"
format: 
  html:
    page-layout: full
server: shiny

execute:
  message: false
  warning: false
---

```{r}
#| label: setup
library(shiny)
library(wqtrends)
library(ggplot2)
library(ggmap)
library(patchwork)
library(lubridate)
library(dplyr)

data(datprc)
data(locs)
data(map)

params <- list(
  'Chlorophyll-a (ug/L)' = 'chl',
  'GPP (mg C m-2 d-1)' = 'gpp',
  'DO (mg/L)' = 'do',
  'DO sat. (%)' = 'dosat',
  'Kd (m-1)' = 'kd'
)

bssz <- 16

pbase <- ggmap(map) +
  theme_bw() +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    plot.background = element_rect(fill = 'transparent', color = NA)
  )
```

```{r}
#| context: server
# selected station location and raw time series
mapselplo <- reactive({

  # inputs
  station <- input$station

  locpt <- locs %>%
    filter(Station %in% !!station)

  # map
  p1 <- pbase +
    geom_point(data = locpt, aes(x = lon, y = lat), colour = 'tomato1', size = 8) +
    geom_text(data = locs, aes(x = lon, y = lat, label = Station)) +
    theme(
      axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
      axis.text.y = element_text(size = 10)
      )

  out <- p1

  return(out)

})

# models for selected station
mod <- reactive({

  # inputs
  parameter <- input$parameter
  station <- input$station

  fl <- paste0('mods_', parameter, station)
  load(file = paste0('data/', fl, '.RData'))

  out <- get(fl) %>%
    .$modi %>% 
    .[[1]]
  
  return(out)

})

# y axis label
ylb <- reactive({

  # input
  parameter <- input$parameter

  out <- params %in% parameter %>% which %>% params[.] %>% names

  return(out)

})

# series plot
prdseries <- reactive({
  
  # inputs
  mod <- mod()
  ylb <- ylb()
  
  out <- show_prdseries(mod, ylab = ylb, base_size = bssz) + 
    labs(
      title = "GAM fit",
      subtitle = "Points are observed values"
    )
  
  return(out)
  
})

# seasonal averages with trend
mettrndseason <- reactive({

  # inputs
  dytr <- input$dytr
  mod <- mod()
  ylb <- ylb()
  metsel <- input$metsel
  wntr <- input$wntr
  wnty <- input$wnty

  req(dytr)
  
  # use ave if metsel is mean
  useave <- F
  if(metsel == 'mean')
    useave <- T

  # plot
  out <- show_mettrndseason(mod, metsel = eval(parse(text = metsel)), doystr = dytr[1], doyend = dytr[2], win = wntr,
    justify = wnty, ylab = ylb, nsim = 1e3, na.rm = TRUE, useave = useave,
    base_size = bssz)

  return(out)

})

# seasonal averages
metseason <- reactive({

  # inputs
  dytr <- input$dytr
  yrtr <- input$yrtr
  mod <- mod()
  ylb <- ylb()
  metsel <- input$metsel
  wntr <- input$wntr
  wnty <- input$wnty

  req(yrtr)
  
  # use ave if metsel is mean
  useave <- F
  if(metsel == 'mean')
    useave <- T

  out <- try({

    show_metseason(mod, metsel = eval(parse(text = metsel)), doystr = dytr[1], doyend = dytr[2], win = wntr,
      justify = wnty, ylab = ylb, yrstr = yrtr[1], yrend = yrtr[2], nsim = 1e3, na.rm = TRUE, useave = useave,
      base_size = bssz)

    })

  validate(
    need(inherits(out, 'ggplot'), 'Pick different year range')
  )

  return(out)

})
```

```{r}
#| context: server
output$mapselplo <- renderPlot(mapselplo())
output$prdseries <- renderPlot(prdseries())
output$mettrndseason <- renderPlot(mettrndseason())
output$metseason <- renderPlot(metseason())
output$yrtr <- renderUI({
  
  req(mod())
  yrs <- mod()$model %>% pull(cont_year) %>% date_decimal(.) %>% year %>% unique
  sliderInput('yrtr', 'Select years for trend:', min = min(yrs), max = max(yrs), value = c(1995, 2005), sep = "", step = 1, width = '99%')
  
})
```

This application uses data from long-term USGS water quality monitoring in San Francisco Bay ([Cloern and Schraga 2016](https://doi.org/10.5066/F7TQ5ZPR){target="_blank"}; [Schraga and Cloern 2017](https://doi.org/10.1038/sdata.2017.98){target="_blank"}; [Schraga et al. 2020](https://doi.org/10.5066/F7D21WGF){target="_blank"}). Additional background details on the GAM, mixed-effects meta-analysis approach are presented in [Beck et al (2022)](https://doi.org/10.1016/j.scitotenv.2021.149927){target="_blank"}.

```{r}
#| panel: sidebar
plotOutput('mapselplo')
selectInput("station", "Choose station:", sort(unique(datprc$station)), width = '100%')
selectInput("parameter", "Choose parameter:", choices = params, width = '100%')
sliderInput('dytr', 'Select day-of-year for season:', min = 1, max = 365, value = c(213, 304), width = '100%')
selectInput('metsel', 'Select summary metric:', choices = c('mean', 'min', 'max', 'var'), width = '100%')
uiOutput('yrtr')
selectInput('wnty', 'Select window type:', choices = c('left', 'right', 'center'), width = '100%')
sliderInput('wntr', 'Select window size:', min = 2, max = 20, value = 10, width = '100%')
```

```{r}
#| panel: fill
plotOutput('prdseries', height = 320)
plotOutput('mettrndseason', height = 370)
plotOutput('metseason', height = 320)
```


